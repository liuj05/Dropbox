package CS6348FinalProject.proj;

import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.v1.DbxDelta.Entry;
import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.async.LaunchEmptyResult.Tag;
import com.dropbox.core.v2.files.FileMetadata;
import com.dropbox.core.v2.files.ListFolderContinueErrorException;
import com.dropbox.core.v2.files.ListFolderResult;
import com.dropbox.core.v2.files.Metadata;
import com.dropbox.core.v2.files.UploadErrorException;
import com.dropbox.core.v2.files.WriteMode;
import com.dropbox.core.v2.users.FullAccount;
import com.dropbox.core.v2.sharing.*;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.*;
import java.io.*;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.text.html.parser.Entity;

public class App {
	
	private static final String pbKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArK69SjX3ht6iVbA49QNAX72S2VXQrclGpUEKsMZRUerFHzRJ6mDzxoIi9RotUC4vUm7fM0CdfKiKe1ojpuYT3bFNwkXgnVqhIDfSa8KshxIUoRIIZE2xgOqlSC6fIowau2fRFjc3T3B67si+SF+S5e0i5LoelXTLykM67RCog97+MtRkAadDTstOkCexVSL32Encl4vlu7mYfM1t/85CuWyx0fRXupogJd8ZxlDpbZd2cq/NLhDPGR6uP4RVBMm77Ptxec/4JgRQpIvJer9+FMzyC5ZnwgO2mBHIOkvNCl186cvg5mEi1H3IQH/5LsPLc0WJ2dMv4IMREKe5YhmmBwIDAQAB";
    private static final String ACCESS_TOKEN = "OTc3CCGa3mAAAAAAAAAACqeFwpCcohAGJOloaIX4ADetv-VDwkw8Imknthkf_Uls";
    public static int count = 0;
    
    //display the menu of files in dropbox
    public void show() throws ListFolderContinueErrorException, DbxException, IOException
    {
    	// Create Dropbox client
        @SuppressWarnings("deprecation")
		DbxRequestConfig config = new DbxRequestConfig("dropbox/java-tutorial", "en_US");
        DbxClientV2 client = new DbxClientV2(config, ACCESS_TOKEN);

        // Get current account info
        FullAccount account = client.users().getCurrentAccount();
        System.out.println("Hi, " + account.getName().getDisplayName()+ ", Here are the Files in Your Menu:");
      
        // Get files and folder metadata from Dropbox root directory
        ListFolderResult result = client.files().listFolder("");
        while (true) {
            for (Metadata metadata : result.getEntries()) {
                System.out.println(metadata.getPathLower());
            }

            if (!result.getHasMore()) {
                break;
            }

            result = client.files().listFolderContinue(result.getCursor());
        }
        
    }
    
    
    
    //upload encrypted file
    public void upload() throws Exception
    {    	
    	// Create Dropbox client
        @SuppressWarnings("deprecation")
		DbxRequestConfig config = new DbxRequestConfig("dropbox/java-tutorial", "en_US");
        DbxClientV2 client = new DbxClientV2(config, ACCESS_TOKEN);

        
        //get path
        String path = "D:\\UTD\\1. Data and Application Security\\Project\\test.txt";
        
        
        //get file name
        String[] split = path.split("\\\\");
        String file_name = split[split.length - 1];
        
        //get content in the file
        @SuppressWarnings("resource")
		String file_content = new Scanner(new File(path)).useDelimiter("\\Z").next();
        
        //initiallize instant for encryption
        AESEncryption aes = new AESEncryption();
        
        //get secret key for encrypt file
        SecretKey key_file = AESEncryption.generateKey();
        
        //get iv byte array
        byte[] iv_byte = aes.get_iv_bytes();
        
        
        //get key for hmac
        SecretKey key_hmac = AESEncryption.generateKey();
        
        //encrypt file content
        String file_enc = aes.doEnc(file_content, key_file, iv_byte);
        
        //hmac of cipher
        String file_hmac = aes.SHA512(file_enc, key_hmac);
        
        //Concatenate file key, iv and hmac key;
        String key_file_str = AESEncryption.saveKey(key_file);
        String key_hmac_str = AESEncryption.saveKey(key_hmac);
        String iv_str = aes.bytesToStr(iv_byte);
        String key_set = key_file_str + " " + iv_str + " " + key_hmac_str;
        
        //master key
        String mk_str = "dbsec6348";
        SecretKeySpec mk = aes.getMK(mk_str);
        
        //encrypt the key set with master key
        String enc_key_set = aes.encKey(key_set, mk);
        
        // All content in the file
        // string order splited by space
        // order in all content: file_enc -> file_hmac -> enc_key_set 
        // order in enc_key_set: file key -> iv -> hmac key 
        String all_content = file_enc + " " + file_hmac + " " + enc_key_set;
        
        //write all content in to temp file
        String temp_path = "D:\\UTD\\1. Data and Application Security\\Project\\temp\\"+file_name;
        
        //write content into file
        Files.write(Paths.get(temp_path), all_content.getBytes());
        
        // Upload "test.txt" to Dropbox
        String metatdata = "/" + file_name;
        try (InputStream in = new FileInputStream(temp_path)) {
            FileMetadata metadata = client.files().uploadBuilder(metatdata).withMode(WriteMode.OVERWRITE).uploadAndFinish(in);
            System.out.println(file_name + " Upload Success!");
        }
        
        File file = new File(temp_path);
        //delete temp file after upload
        if (file.exists())
        {
        	file.delete();
        }
    }
    
    public static void main(String args[]) throws Exception 
    {  
    	RSAEncryption rsa = new RSAEncryption();
    	RSAPublicKey pbk = rsa.restorePbKey(pbKey);
    	System.out.println(pbk);
    	/*App a = new App();
    	a.show();
    	boolean flag = true;
    	while(flag)
    	{
    		//Show options
    		System.out.println("Optionsï¼š");
    	    System.out.println("[1] \t Upload File");
    	    System.out.println("[2] \t Download File");
    	    System.out.println("[3] \t Sharing File");
    		try
    		{
    			@SuppressWarnings("resource")
				Scanner reader = new Scanner(System.in);  // Reading from System.in
        		//prompt for option
        		System.out.println("Please Choose one of Option:");
        		int option = reader.nextInt(); // Scans the next token of the input as an int.
        		
        		switch(option)
        		{
        			case 1:	a.upload(); break;
        			case 2: System.out.println("Down load file"); break;
        			case 3: System.out.println("Share file"); break;
        			default: flag = false; System.out.println("Program Terminated."); break;
        		}
    		}
			
    		catch(Exception e)
    		{
    			flag = false;
    			System.out.println("Program Terminated.");
    		}
    	}*/
    }
}